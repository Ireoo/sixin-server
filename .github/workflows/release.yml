name: 构建和发布

on:
  push:
    branches:
      - main # 或者您的主分支名称
    tags:
      - "v*"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            goos: linux
            goarch:
              [
                386,
                amd64,
                arm,
                arm64,
                ppc64,
                ppc64le,
                mips,
                mipsle,
                mips64,
                mips64le,
                s390x,
                riscv64,
              ]
          # Windows
          - os: windows-latest
            goos: windows
            goarch: [386, amd64, arm64]
          # macOS
          - os: macos-latest
            goos: darwin
            goarch: [amd64, arm64]
          # FreeBSD (使用 ubuntu 进行交叉编译)
          - os: ubuntu-latest
            goos: freebsd
            goarch: [386, amd64, arm, arm64]

    steps:
      - uses: actions/checkout@v3
      - name: 设置 Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"

      - name: 安装依赖（仅限 Windows）
        if: matrix.goos == 'windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: mingw-w64-x86_64-gcc

      - name: 构建
        env:
          GOOS: ${{ matrix.goos }}
          CGO_ENABLED: 1
        run: |
          for arch in ${{ join(matrix.goarch, ' ') }}; do
            output_name="sixin-server-${{ matrix.goos }}-${arch}"
            if [ "${{ matrix.goos }}" = "windows" ]; then
              output_name+='.exe'
            fi
            GOARCH=${arch} go build -o ${output_name}
          done
        shell: bash

      - name: 上传构建产物
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.goos }}
          path: sixin-server-${{ matrix.goos }}-*

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 下载所有构建产物
        uses: actions/download-artifact@v3

      - name: 创建 Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }} - ${{ github.event.head_commit.timestamp }}
          draft: false
          prerelease: false

      - name: 上传 Release 资产
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            **/sixin-server-*
